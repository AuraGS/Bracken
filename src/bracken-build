#!/usr/bin/env perl 
#####################################################################
#bracken-build performs all steps/combines programs to generate the kmer distribution
#file from an already-built Kraken database
#Copyright (C) 2016-2017 Jennifer Lu, jlu26@jhmi.edu
#
#This file is part of Bracken.
#
#Bracken is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 3 of the license, or 
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#################################################################### 
#Jennifer Lu, jlu26@jhmi.edu
#11/30/2017
#
#This program uses a given Kraken database and calls all steps to 
#generate the necessary kmer distribution file needed to run Bracken 
#for a given Kraken database 
#
#Parameters:
#   - kraken version:
#       "Default: kraken2" 
#       "Other options: kraken" 
#       MUST BE A VALID COMMAND LINE
#   - If using Kraken 1.0: Kraken database path must contain:
#       - library/
#       - database.kdb
#       - database.idx
#       - seqid2taxid.map
#   - If using Kraken 2.0: Kraken database path must contain:
#       - library/
#       - hash.k2d
#       - opts.k2d
#       - taxo.k2d
#       - seqid2taxid.map 
#   - threads [default: 12]
#   - read length [default: 150]

use strict;
use warnings;
use File::Basename;
use Getopt::Long;


#Define Program Defaults 
my $DEF_THREAD_CT = 10;
my $DEF_READ_LENGTH = 150;
my $DEF_KRAKEN = "kraken2";
#Define User-Defined Options
my $PROG = basename $0;

my (
    $kraken,
    $db,
    $threads,
    $length,
    $kmer_distrib
);

#Set defaults
$threads = $DEF_THREAD_CT;
$length = $DEF_READ_LENGTH;
$kraken = $DEF_KRAKEN;

#Get all command line options
GetOptions(
    "help" => \&display_help,
    "db=s" => \$db,
    "read-length=i" => \$length,
    "threads=i" => \$threads,
    "kraken=s" => \$kraken 
) or usage();

#Check all command line options
if (@ARGV) {
    warn "Unrecognized arguments on command line. \n";
    usage();
} 
if (! defined $db) {
    usage();
    die "Must specify database path\n";
}
if ($threads <= 0) {
    usage();
    die "Can't use nonpositive thread count of $threads\n";
}
if ($length <= 0) {
    die "Can't use nonpositive read lengths\n"; 
}
#Check Kraken command line
if (! -e "$kraken") {
    die "$kraken is not a valid kraken command\nPlease specify path to kraken/kraken2 installation using '--kraken'\n";
}
#Set Bracken directory
my $BRACKEN_DIR = "#####=BRACKEN_DIR=#####";
if (! -e "$BRACKEN_DIR/classify_db.py"){
    use Cwd 'abs_path'; 
    $BRACKEN_DIR = dirname abs_path($0);
}
#Set environmental variables
$ENV{"KRAKEN"} = $kraken;
$ENV{"BRACKEN_DIR"} = $BRACKEN_DIR;
$ENV{"PATH"} = "$BRACKEN_DIR:$ENV{PATH}";
$ENV{"KRAKEN_DB_NAME"} = $db;
$ENV{"KRAKEN_THREAD_CT"} = $threads;
$ENV{"READ_LENGTH"} = $length;
#Run build steps 
exec('$kraken --db $db --threads $threads <( python classify_db.py $length <( find -L $db/library \( -name "*.fna" -o -name "*.fa" -o -name "*.fasta" \) -exec cat {} + ) ) > $db/database.$length.mers.kraken');

#End of Main Code
#usage method
sub usage {
    my $exit_code = @_ ? shift : 64;
    print STDERR <<EOF;
Usage: $PROG [options]
Options:
    --db NAME               Kraken DB path (mandatory except for --help)
    --kraken NAME           Path for kraken/kraken2 executable (default: $DEF_KRAKEN)
    --threads NUM           Number of threads (default: $DEF_THREAD_CT)
    --read-length NUM       Read length in bp (determines the size of kmers
                            each genome is broken into before classifying against
                            the database. For paired reads, use the length of one 
                            read from the pair. It is more accurate to use 
                            lengths > 100bp) (default: $DEF_READ_LENGTH)
    --help                  Print this message
EOF
    exit $exit_code;
} 

sub display_help {
    usage(0);
}

